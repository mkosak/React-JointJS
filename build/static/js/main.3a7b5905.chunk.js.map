{"version":3,"sources":["components/AddPort.js","App.js","index.js","colors.module.scss"],"names":["AddPort","onChangeType","e","setState","type","target","value","onChangeName","name","addNewPort","preventDefault","state","addPort","props","undefined","portTypes","this","className","map","port","htmlFor","id","onChange","checked","placeholder","onClick","React","Component","App","options","inPorts","outPorts","ports","includes","error","push","reference","posts","groups","in","attrs","fill","colors","inPort","out","outPort","text","mainWhite","rect","mainAction","position","x","y","size","width","height","element","joint","devs","Model","graph","Graph","paper","Paper","el","outerHeight","outerWidth","gridSize","model","addTo","prevProps","prevState","prevInPorts","prevOutPorts","length","set","ref","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"oRAoGeA,E,kDA5FX,aAAe,IAAD,8BACV,gBAeJC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVC,KAAMF,EAAEG,OAAOC,SAlBT,EA2BdC,aAAe,SAACL,GACZ,EAAKC,SAAS,CACVK,KAAMN,EAAEG,OAAOC,SA7BT,EAsCdG,WAAa,SAACP,GACVA,EAAEQ,iBADc,MAGO,EAAKC,MAApBH,EAHQ,EAGRA,KAAMJ,EAHE,EAGFA,KACNQ,EAAY,EAAKC,MAAjBD,aAEKE,IAATN,IAEAI,EAAQJ,EAAMJ,GAGd,EAAKD,SAAL,2BAAmB,EAAKQ,OAAxB,IAA+BH,KAAM,QA9CzC,EAAKO,UAAY,CAAC,UAAW,YAE7B,EAAKJ,MAAQ,CACTH,KAAM,GACNJ,KAAM,WAPA,E,0CAqDd,WAAU,IAAD,SACkBY,KAAKL,MAApBH,EADH,EACGA,KAAMJ,EADT,EACSA,KACd,OACI,uBAAMa,UAAU,WAAhB,UACI,qBAAKA,UAAU,oBAAf,SACKD,KAAKD,UAAUG,KAAI,SAACC,GAAD,OAChB,wBAAOC,QAASD,EAAhB,UACI,uBACIf,KAAK,QACLiB,GAAIF,EACJX,KAAK,OACLc,SAAU,EAAKrB,aACfsB,QAASnB,IAASe,EAClBb,MAAOa,IAEVA,IATsBA,QAanC,qBAAKF,UAAU,oBAAf,SACI,uBACIb,KAAK,OACLE,MAAOE,EACPc,SAAUN,KAAKT,aACfiB,YAAY,gBAGpB,wBACIP,UAAU,mBACVb,KAAK,SACLqB,QAAST,KAAKP,WAHlB,iC,GArFMiB,IAAMC,W,gBCqIbC,G,wDAhIX,aAAe,IAAD,uBACV,gBA0FJhB,QAAU,SAACJ,EAAMJ,GAAU,IACfyB,EAAY,EAAKlB,MAAjBkB,QACAC,EAAsBD,EAAtBC,QAASC,EAAaF,EAAbE,SAEXC,EAAkB,YAAT5B,EAAD,YAA2B0B,GAA3B,YAA0CC,GAEnDC,EAAMC,SAASzB,GAGhB,EAAKL,SAAS,CAAE+B,MAAO,uBAFvBF,EAAMG,KAAK3B,GAKf,EAAKL,SAAS,CAAE0B,QAAQ,2BAAMA,GAAP,kBAAiBzB,EAAO4B,OAnG/C,EAAKI,UAAY,KAGjB,EAAKzB,MAAQ,CACTuB,MAAO,GAGPL,QAAS,CACLC,QAAS,GACTC,SAAU,GACVM,MAAO,CACHC,OAAQ,CACJC,GAAI,CACAC,MAAO,CACH,aAAc,CACVC,KAAMC,IAAOC,UAIzBC,IAAK,CACDJ,MAAO,CACH,aAAc,CACVC,KAAMC,IAAOG,aAMjCL,MAAO,CACH,SAAU,CACNM,KAAM,QACN,QAAS,GACT,QAAS,GACTL,KAAMC,IAAOK,WAEjBC,KAAM,CAAEP,KAAMC,IAAOO,aAEzBC,SAAU,CAAEC,EAAG,GAAIC,EAAG,IACtBC,KAAM,CAAEC,MAAO,GAAIC,OAAQ,MA1CzB,IA8CF1B,EAAY,EAAKlB,MAAjBkB,QA9CE,OAiDV,EAAK2B,QAAU,IAAIC,SAAaC,KAAKC,MAAM9B,GAjDjC,E,qDAoDd,WAEIb,KAAK4C,MAAQ,IAAIH,MAAUI,MAG3B7C,KAAK8C,MAAQ,IAAIL,MAAUM,MAAM,CAC7BC,GAAIhD,KAAKoB,UACTmB,OAAQvC,KAAKoB,UAAU6B,YACvBX,MAAOtC,KAAKoB,UAAU8B,WACtBC,SAAU,EACVC,MAAOpD,KAAK4C,QAIhB5C,KAAKwC,QAAQa,MAAMrD,KAAK4C,S,gCAG5B,SAAmBU,EAAWC,GAAY,IAC9B1C,EAAYb,KAAKL,MAAjBkB,QAEAC,EAAsBD,EAAtBC,QAASC,EAAaF,EAAbE,SACXyC,EAAcD,EAAU1C,QAAQC,QAChC2C,EAAeF,EAAU1C,QAAQE,SAGnCD,EAAQ4C,OAASF,EAAYE,QAC7B1D,KAAKwC,QAAQmB,IAAI,UAAW7C,GAE5BC,EAAS2C,OAASD,EAAaC,QAC/B1D,KAAKwC,QAAQmB,IAAI,WAAY5C,K,oBAyBrC,WAAU,IAAD,OACGG,EAAUlB,KAAKL,MAAfuB,MAER,OACI,sBAAKjB,UAAU,MAAf,UACI,sBAAKA,UAAU,kBAAf,UACI,cAAC,EAAD,CAASL,QAASI,KAAKJ,UACtBsB,GACG,mBAAGjB,UAAU,QAAb,SAAsBiB,OAG9B,qBACIjB,UAAU,kBACV2D,IAAK,SAACA,GACF,EAAKxC,UAAYwC,Y,GAzHvBlD,IAAMC,YCFxBkD,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,U,kBCR5BC,EAAOC,QAAU,CAAC,KAAO,UAAU,OAAS,UAAU,UAAY,OAAO,UAAY,OAAO,WAAa,OAAO,WAAa,UAAU,YAAc,UAAU,UAAU,OAAO,WAAW,UAAU,OAAS,qBAAqB,MAAQ,S","file":"static/js/main.3a7b5905.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddPort extends React.Component {\n    static propTypes = {\n        addPort: PropTypes.func.isRequired,\n    }\n\n    constructor() {\n        super();\n\n        this.portTypes = ['inPorts', 'outPorts'];\n\n        this.state = {\n            name: '',\n            type: 'inPorts',\n        };\n    }\n\n    /**\n     * Change port type\n     * @method\n     * @param {event} e - on change event\n     */\n    onChangeType = (e) => {\n        this.setState({\n            type: e.target.value,\n        });\n    }\n\n    /**\n     * Change port name\n     * @method\n     * @param {event} e - on change event\n     */\n    onChangeName = (e) => {\n        this.setState({\n            name: e.target.value,\n        });\n    }\n\n    /**\n     * Add new port\n     * @method\n     * @param {event} e - on change event\n     */\n    addNewPort = (e) => {\n        e.preventDefault();\n\n        const { name, type } = this.state;\n        const { addPort } = this.props;\n\n        if (name !== undefined) {\n            // call prop\n            addPort(name, type);\n\n            // clear the name field\n            this.setState({ ...this.state, name: '' });\n        }\n    }\n\n    render() {\n        const { name, type } = this.state;\n        return (\n            <form className=\"add-port\">\n                <div className=\"add-port__control\">\n                    {this.portTypes.map((port) => (\n                        <label htmlFor={port} key={port}>\n                            <input\n                                type=\"radio\"\n                                id={port}\n                                name=\"type\"\n                                onChange={this.onChangeType}\n                                checked={type === port}\n                                value={port}\n                            />\n                            {port}\n                        </label>\n                    ))}\n                </div>\n                <div className=\"add-port__control\">\n                    <input\n                        type=\"text\"\n                        value={name}\n                        onChange={this.onChangeName}\n                        placeholder=\"Port name\"\n                    />\n                </div>\n                <button\n                    className=\"add-port__button\"\n                    type=\"submit\"\n                    onClick={this.addNewPort}\n                >\n                    Add New Port\n                </button>\n            </form>\n        );\n    }\n}\n\nexport default AddPort;\n","import React from 'react';\nimport * as joint from 'jointjs';\nimport AddPort from './components/AddPort';\n\nimport colors from './colors.module.scss';\nimport './App.scss';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        // element reference for the canvas\n        this.reference = null;\n\n        // initial state\n        this.state = {\n            error: '',\n\n            // shape options\n            options: {\n                inPorts: [],\n                outPorts: [],\n                posts: {\n                    groups: {\n                        in: {\n                            attrs: {\n                                '.port-body': {\n                                    fill: colors.inPort,\n                                },\n                            },\n                        },\n                        out: {\n                            attrs: {\n                                '.port-body': {\n                                    fill: colors.outPort,\n                                },\n                            },\n                        },\n                    },\n                },\n                attrs: {\n                    '.label': {\n                        text: 'Model',\n                        'ref-x': 0.5,\n                        'ref-y': 0.2,\n                        fill: colors.mainWhite,\n                    },\n                    rect: { fill: colors.mainAction },\n                },\n                position: { x: 50, y: 50 },\n                size: { width: 90, height: 90 },\n            },\n        };\n\n        const { options } = this.state;\n\n        // init Model shape\n        this.element = new joint.shapes.devs.Model(options);\n    }\n\n    componentDidMount() {\n        // init graph\n        this.graph = new joint.dia.Graph();\n\n        // init paper\n        this.paper = new joint.dia.Paper({\n            el: this.reference,\n            height: this.reference.outerHeight,\n            width: this.reference.outerWidth,\n            gridSize: 1,\n            model: this.graph,\n        });\n\n        // render Model\n        this.element.addTo(this.graph);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { options } = this.state;\n\n        const { inPorts, outPorts } = options;\n        const prevInPorts = prevState.options.inPorts;\n        const prevOutPorts = prevState.options.outPorts;\n\n        // setting ports\n        if (inPorts.length > prevInPorts.length) {\n            this.element.set('inPorts', inPorts);\n        }\n        if (outPorts.length > prevOutPorts.length) {\n            this.element.set('outPorts', outPorts);\n        }\n    }\n\n    /**\n     * Adds new ports\n     * @method\n     * @param {string} name - New port name\n     * @param {string} type - Type of the port (inPorts/outPorts)\n     */\n    addPort = (name, type) => {\n        const { options } = this.state;\n        const { inPorts, outPorts } = options;\n\n        const ports = (type === 'inPorts') ? [...inPorts] : [...outPorts];\n\n        if (!ports.includes(name)) {\n            ports.push(name);\n        } else {\n            this.setState({ error: 'Port already exist' });\n        }\n\n        this.setState({ options: { ...options, [type]: ports } });\n    }\n\n    render() {\n        const { error } = this.state;\n\n        return (\n            <div className=\"app\">\n                <div className=\"app__side-panel\">\n                    <AddPort addPort={this.addPort} />\n                    {error && (\n                        <p className=\"error\">{error}</p>\n                    )}\n                </div>\n                <div\n                    className=\"app__main-panel\"\n                    ref={(ref) => {\n                        this.reference = ref;\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"#677294\",\"mainBg\":\"#e2e2e2\",\"mainWhite\":\"#fff\",\"mainBlack\":\"#000\",\"mainBorder\":\"#444\",\"mainAction\":\"#5F3794\",\"hoverAction\":\"#9E5BF6\",\"in-port\":\"#10f\",\"out-port\":\"#00945b\",\"bgGrid\":\"rgba(17,0,255,0.1)\",\"error\":\"red\"};"],"sourceRoot":""}