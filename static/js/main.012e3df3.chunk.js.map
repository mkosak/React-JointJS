{"version":3,"sources":["components/shape-control/AddPort.js","components/shape-control/ShapeControl.js","App.js","index.js","colors.module.scss"],"names":["AddPort","onChangeType","e","setState","type","target","value","onChangeName","name","addNewPort","preventDefault","state","addPort","props","error","setTimeout","portTypes","this","className","map","port","htmlFor","id","onChange","checked","placeholder","onClick","React","Component","ShapeControl","inPorts","outPorts","ports","includes","push","graph","shape","label","attr","addTo","prevProps","prevState","prevInPorts","prevOutPorts","length","set","cloneShape","App","shapes","newShape","clone","translate","obj","joint","Graph","reference","initialShapeOptions","posts","groups","in","attrs","fill","colors","inPort","out","outPort","mainWhite","rect","mainAction","position","x","y","size","width","height","devs","Model","paper","Paper","el","outerHeight","outerWidth","gridSize","model","ref","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.012e3df3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddPort extends React.Component {\n    constructor() {\n        super();\n\n        this.portTypes = ['inPorts', 'outPorts'];\n\n        this.state = {\n            name: '',\n            type: 'inPorts',\n        };\n    }\n\n    /**\n     * Change port type\n     * @method\n     * @param {event} e - on change event\n     */\n    onChangeType = (e) => {\n        this.setState({\n            type: e.target.value,\n        });\n    }\n\n    /**\n     * Change port name\n     * @method\n     * @param {event} e - on change event\n     */\n    onChangeName = (e) => {\n        this.setState({\n            name: e.target.value,\n        });\n    }\n\n    /**\n     * Add new port\n     * @method\n     * @param {event} e - on change event\n     */\n    addNewPort = (e) => {\n        e.preventDefault();\n\n        const { name, type } = this.state;\n        const { addPort } = this.props;\n\n        if (name !== '') {\n            // call prop\n            addPort(name, type);\n\n            // clear the name field\n            this.setState({ ...this.state, name: '' });\n        } else {\n            this.setState({ error: 'Please type port name' }, () => {\n                setTimeout(() => {\n                    this.setState({ error: '' });\n                }, 1500);\n            });\n        }\n    }\n\n    render() {\n        const { name, type, error } = this.state;\n        return (\n            <form className=\"add-port\">\n                <div className=\"add-port__control\">\n                    {this.portTypes.map((port) => (\n                        <label htmlFor={port} key={port}>\n                            <input\n                                type=\"radio\"\n                                id={port}\n                                name=\"type\"\n                                onChange={this.onChangeType}\n                                checked={type === port}\n                                value={port}\n                            />\n                            {port}\n                        </label>\n                    ))}\n                </div>\n                <div className=\"add-port__control\">\n                    <input\n                        type=\"text\"\n                        value={name}\n                        onChange={this.onChangeName}\n                        placeholder=\"Port name\"\n                    />\n                    {error && (\n                        <p className=\"error\">{error}</p>\n                    )}\n                </div>\n                <button\n                    className=\"add-port__button btn\"\n                    type=\"submit\"\n                    onClick={this.addNewPort}\n                >\n                    Add New Port\n                </button>\n            </form>\n        );\n    }\n}\n\nAddPort.propTypes = {\n    addPort: PropTypes.func.isRequired,\n};\n\nexport default AddPort;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AddPort from './AddPort';\n\nclass ShapeControl extends React.Component {\n    constructor() {\n        super();\n\n        // initial state\n        this.state = {\n            error: '',\n            inPorts: [],\n            outPorts: [],\n        };\n    }\n\n    componentDidMount() {\n        const { graph, shape, label } = this.props;\n\n        // give shape label\n        shape.attr('.label/text', label);\n\n        // render Model\n        shape.addTo(graph);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { shape } = this.props;\n        const { inPorts, outPorts } = this.state;\n        const prevInPorts = prevState.inPorts;\n        const prevOutPorts = prevState.outPorts;\n\n        // setting ports\n        if (inPorts.length > prevInPorts.length) {\n            shape.set('inPorts', inPorts);\n        }\n        if (outPorts.length > prevOutPorts.length) {\n            shape.set('outPorts', outPorts);\n        }\n    }\n\n    /**\n     * Adds new ports\n     * @method\n     * @param {string} name - New port name\n     * @param {string} type - Type of the port (inPorts/outPorts)\n     */\n    addPort = (name, type) => {\n        const { inPorts, outPorts } = this.state;\n\n        const ports = (type === 'inPorts') ? [...inPorts] : [...outPorts];\n\n        if (!ports.includes(name)) {\n            ports.push(name);\n        } else {\n            this.setState({ error: 'Port already exist' }, () => {\n                setTimeout(() => {\n                    this.setState({ error: '' });\n                }, 1500);\n            });\n        }\n\n        this.setState({ [type]: ports });\n    }\n\n    render() {\n        const { error } = this.state;\n        const { cloneShape, shape, label } = this.props;\n\n        return (\n            <div className=\"shape-control\">\n                <div className=\"shape-control__name\">\n                    {label}\n                </div>\n\n                <AddPort addPort={this.addPort} />\n\n                {error && (\n                    <p className=\"error\">{error}</p>\n                )}\n\n                <div className=\"clone-shape\">\n                    <button\n                        className=\"clone-shape__button btn\"\n                        type=\"button\"\n                        onClick={cloneShape(shape)}\n                    >\n                        Clone Shape\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nShapeControl.propTypes = {\n    graph: PropTypes.object.isRequired,\n    shape: PropTypes.object.isRequired,\n    label: PropTypes.string.isRequired,\n    cloneShape: PropTypes.func.isRequired,\n};\n\nexport default ShapeControl;\n","import React from 'react';\nimport * as joint from 'jointjs';\n\nimport ShapeControl from './components/shape-control/ShapeControl';\n\nimport colors from './colors.module.scss';\nimport './App.scss';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        // init graph\n        this.graph = new joint.dia.Graph();\n\n        // element reference for the canvas\n        this.reference = null;\n\n        // shape initial options\n        this.initialShapeOptions = {\n            posts: {\n                groups: {\n                    in: {\n                        attrs: {\n                            '.port-body': {\n                                fill: colors.inPort,\n                            },\n                        },\n                    },\n                    out: {\n                        attrs: {\n                            '.port-body': {\n                                fill: colors.outPort,\n                            },\n                        },\n                    },\n                },\n            },\n            attrs: {\n                '.label': {\n                    'ref-x': 0.5,\n                    'ref-y': 0.2,\n                    fill: colors.mainWhite,\n                },\n                rect: { fill: colors.mainAction },\n            },\n            position: { x: 50, y: 50 },\n            size: { width: 90, height: 90 },\n        };\n\n        // init Model shape\n        this.shape = new joint.shapes.devs.Model(this.initialShapeOptions);\n\n        // initial state\n        this.state = {\n            shapes: [{ label: 'Model', obj: this.shape }],\n        };\n    }\n\n    componentDidMount() {\n        // init paper\n        this.paper = new joint.dia.Paper({\n            el: this.reference,\n            height: this.reference.outerHeight,\n            width: this.reference.outerWidth,\n            gridSize: 1,\n            model: this.graph,\n        });\n    }\n\n    /**\n     * Adds new shape by cloning existing\n     * @method\n     * @param {object} shape - jointjs shape object\n     */\n    cloneShape = (shape) => () => {\n        const { shapes } = this.state;\n        const newShape = shape.clone().translate(300, 0);\n\n        this.setState({ shapes: [...shapes, { obj: newShape, label: `Model ${shapes.length + 1}` }] });\n    }\n\n    render() {\n        const { shapes } = this.state;\n\n        return (\n            <div className=\"app\">\n                <div className=\"app__side-panel\">\n                    {shapes.map((shape) => (\n                        <ShapeControl\n                            key={shape.label}\n                            label={shape.label}\n                            shape={shape.obj}\n                            graph={this.graph}\n                            cloneShape={this.cloneShape}\n                        />\n                    ))}\n                </div>\n                <div\n                    className=\"app__main-panel\"\n                    ref={(ref) => {\n                        this.reference = ref;\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"#677294\",\"mainBg\":\"#e2e2e2\",\"mainWhite\":\"#fff\",\"mainBlack\":\"#000\",\"mainBorder\":\"#444\",\"mainAction\":\"#5F3794\",\"hoverAction\":\"#9E5BF6\",\"in-port\":\"#10f\",\"out-port\":\"#00945b\",\"bgGrid\":\"rgba(17,0,255,0.1)\",\"error\":\"red\"};"],"sourceRoot":""}